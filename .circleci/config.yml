version: 2.1

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: cimg/python:3.8  # O puedes cambiarlo a la versión de Python que utilices

orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0

jobs:
  test:
    <<: *defaults  
    steps:
      - checkout

      # Restaurar cache de dependencias
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-

      # Instalar dependencias desde el archivo requirements.txt
      - run:
          name: Instalar dependencias
          command: pip install -r requirements.txt

      # Ejecutar Flake8 para Linting
      - run:
          name: Ejecutar Linter
          command: flake8 .

      # Ejecutar tests con cobertura de código
      - run:
          name: Ejecutar pruebas
          command: pytest --cov-report xml:coverage.xml --cov=.

      # Escanear el código con SonarCloud
      - sonarcloud/scan

      # Guardar el cache de dependencias
      - save_cache:
          paths:
            - ~/.cache/pip
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # Almacenar los resultados de los tests
      - store_test_results:
          path: test-results.xml

      # Almacenar cobertura de pruebas
      - store_artifacts:
          path: coverage.xml
      
      # Persistir el workspace para la etapa de despliegue
      - persist_to_workspace:
          root: ~/repo
          paths: .

  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      # Ejemplo: despliegue usando autenticación en algún servicio
      - run:
          name: Autenticar con el registro
          command: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > ~/repo/.npmrc

      # Ejemplo: empaquetar el proyecto
      - run:
          name: Empaquetar aplicación
          command: python setup.py sdist bdist_wheel

      # Ejemplo: publicar o desplegar
      - run:
          name: Desplegar aplicación (simulado)
          command: echo "Desplegando aplicación..."

      # Almacenar artefactos (opcional)
      - store_artifacts:
          path: dist
          destination: package/dist

workflows:
  test-deploy:
    jobs:
      - test
      - deploy:
          requires:
            - test
